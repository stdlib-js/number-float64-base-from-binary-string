{"version":3,"file":"index.mjs","sources":["../lib/todouble.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Converts a double's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {string} frac - literal bit representation of a double's fraction bit sequence\n* @returns {number} fraction)\n*/\nfunction toDouble( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar format = require( '@stdlib/string-format' );\nvar toDouble = require( './todouble.js' );\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `64`\n* @returns {number} double\n*\n* @example\n* var bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n* var val = fromBinaryString( bstr );\n* // returns 3.141592653589793\n*\n* @example\n* var bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n* var val = fromBinaryString( bstr );\n* // returns -1.0e308\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n* var val = fromBinaryString( bstr );\n* // returns -3.14e-320\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n* var val = fromBinaryString( bstr );\n* // returns 5.0e-324\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -0.0\n*\n* @example\n* var bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns NaN\n*\n* @example\n* var bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns Infinity\n*\n* @example\n* var bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -Infinity\n*/\nfunction fromBinaryString( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 64 ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to `%u`. Value: `%s`.', 64, bstr ) );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 12), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toDouble( bstr.substring( 12 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -1022; // (1-BIAS); subnormals are special\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn sign * frac * pow( 2.0, exp );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a literal bit representation.\n*\n* @module @stdlib/number-float64-base-from-binary-string\n*\n* @example\n* var fromBinaryString = require( '@stdlib/number-float64-base-from-binary-string' );\n*\n* var bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 4.0\n*\n* bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n* val = fromBinaryString( bstr );\n* // returns 3.141592653589793\n*\n* bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n* val = fromBinaryString( bstr );\n* // returns -1.0e308\n*\n* bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n* val = fromBinaryString( bstr );\n* // returns -3.14e-320\n*\n* bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n* val = fromBinaryString( bstr );\n* // returns 5.0e-324\n*\n* bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns 0.0\n*\n* bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns -0.0\n*\n* bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns NaN\n*\n* bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns Infinity\n*\n* bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar fromBinaryString = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryString;\n"],"names":["pow","require$$0","PINF","NINF","require$$1","BIAS","require$$2","require$$3","format","require$$4","toDouble","frac","i","sum","length","lib","bstr","sign","exp","Error","parseInt","substring","NaN"],"mappings":";;icAsBA,IAAIA,EAAMC,EA0BV,IC1BIC,EAAOD,EACPE,EAAOC,EACPC,EAAOC,EACPN,EAAMO,EACNC,EAASC,EACTC,EDOJ,SAAmBC,GAClB,IACIC,EADAC,EAAM,EAEV,IAAMD,EAAI,EAAGA,EAAID,EAAKG,OAAQF,IACV,MAAdD,EAAMC,KACVC,GAAOb,EAAK,IAAOY,EAAE,KAGvB,OAAOC,GCyFR,ICvDAE,EDaA,SAA2BC,GAC1B,IAAIC,EACAN,EACAO,EAEJ,GAAqB,KAAhBF,EAAKF,OACT,MAAM,IAAIK,MAAOX,EAAQ,gFAAiF,GAAIQ,IAY/G,GATAC,EAAqB,MAAZD,EAAK,IAAgB,EAAM,EAGpCE,EAAME,SAAUJ,EAAKK,UAAU,EAAG,IAAK,GAAMhB,EAG7CM,EAAOD,EAAUM,EAAKK,UAAW,KAG5BH,KAASb,EAAO,CACpB,GAAc,IAATM,EACJ,OAAkB,IAATM,EAAiB,GAAO,EAElCC,GAAO,SAGH,CAAA,GAAKA,IAAQb,EAAK,EACtB,OAAc,IAATM,EACc,IAATM,EAAiBf,EAAOC,EAE3BmB,IAKPX,GAAQ,EAET,OAAOM,EAAON,EAAOX,EAAK,EAAKkB"}